schema {
  query: Query
}

type Article {
  date: String
  description: String
  link: String
  title: String
}

type DailyData {
  date: String
  end: Int
  high: Int
  low: Int
  start: Int
  volume: Int
}

type DailyInv {
  date: String
  inKR: InvKrObj
  inVal: InvValObj
}

type Indicator {
  changePrice: Float
  changeRate: Float
  countryName: String
  name: String
  symbolCode: String
  tradePrice: Float
}

type InvKrObj {
  foreign: String
  individual: String
  institutions: String
}

type InvValObj {
  foreign: String
  individual: String
  institutions: String
}

type MainInfo {
  global: [Indicator]
  kr: [Indicator]
  reports: [Report2]
}

type Query {
  getMainInfo(keyword: String): MainInfo
  getSectorInfo(sectorName: String, startDate: String): SectorInfo
  getStockInfo(startDate: String, stockId: String): StockInfo
}

type Report {
  analyst: String
  date: String
  firm: String
  priceGoal: String
  reportIdx: ID
  reportName: String
}

type Report2 {
  analyst: String
  date: String
  firm: String
  priceGoal: String
  reportIdx: String
  reportName: String
  stockId: String
  stockName: String
}

type SectorInfo {
  avgYield: Float
  stockList: [StockObj]
  top3List: YieldObj
}

type StockInfo {
  changePrice: Int
  changeRate: Float
  code: String
  companySummary: String
  expYield: Float
  foreignRatio: Float
  high52wPrice: Int
  highPrice: Int
  invStatistics: [DailyInv]
  low52wPrice: Int
  lowPrice: Int
  marketCap: String
  name: String
  news: [Article]
  newsTitles: String
  openingPrice: Int
  pastData: [DailyData]
  pbr: Float
  per: Float
  priceAvg: String
  reportList: [Report]
  roe: Float
  score: String
  tradePrice: Int
  wicsSectorName: String
}

type StockObj {
  changePrice: Int
  changeRate: Float
  count: Int
  expYield: Float
  priceAvg: Int
  sSector: String
  score: String
  stockId: String
  stockName: String
  tradePrice: Int
}

type YieldObj {
  first: String
  firstYield: Float
  second: String
  secondYield: Float
  third: String
  thirdYield: Float
}
